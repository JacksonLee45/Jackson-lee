// data/projects.ts

export interface Project {
  id: number;
  title: string;
  description: string;
  technologies: string[];
  image: string;
  slug: string;
  type: "hosted" | "github";
  githubUrl?: string;
  liveUrl?: string;
  client?: string;
  challenge?: string;
  solution?: string;
  gallery?: string[];
  year?: string;
  role?: string;
  
  // New fields to support enhanced project pages
  technicalDetails?: {
    sections: {
      title: string;
      items: string[];
    }[]
  };
  keyFeatures?: {
    title: string;
    description: string;
  }[];
  lessonsLearned?: string[];
  
  nextProject?: {
    title?: string;
    slug?: string;
  }
}
  
  // Featured projects are the ones displayed on the homepage
  export const featuredProjects: Project[] = [
    {
      id: 1,
      title: "Stride Sync",
      description:
        "A workout tracking platform with an AI coach designed to help runners plan, track, and analyze their training with personalized plans and detailed analytics.",
      technologies: ["Next.js", "React", "TypeScript", "Supabase", "PostgreSQL", "Tailwind CSS", "Anthropic API", "Recharts", "Vercel",  "User Authorization", "REST APIs"],
      image: "/images/stridesync/StrideSyncDark.png",
      slug: "stride-sync",
      type: "hosted",
      client: "Personal Project",
      year: "2025",
      role: "Full Stack Developer",
      challenge: "As I prepared for the New York City Marathon, I discovered that existing running apps lacked flexibility for customizing marathon training plans to fit individual schedules and preferences. Most apps offered rigid, pre-made plans with little room for personalization. Additionally, I wanted to challenge myself technically by integrating AI capabilities to create an intelligent training assistant that could generate personalized plans based on a runner's specific needs.",
      solution: "I built StrideSync as both a practical solution for my marathon training and a technical showcase. The application combines a flexible workout calendar with a Claude-powered AI coach that generates customized training plans as structured data. The system translates natural language conversations about fitness goals into actionable workout schedules, offering the personalization missing from commercial running apps while demonstrating advanced integration between modern web technologies and AI capabilities.",  
      gallery: [
        "/images/stridesync/StrideSyncLight.png",
        "/images/stridesync/stridesync-coach.png",
        "/images/stridesync/stridesync-calendar.png",
        "/images/stridesync/stridesync-trainingplans.png",
        "/images/stridesync/stridesync-analytics.png",
        "/images/stridesync/StrideSyncDark.png",
      ],
      liveUrl: "https://stride-sync.vercel.app/",
      githubUrl: "https://github.com/JacksonLee45/stride-sync",
      technicalDetails: {
        sections: [
          {
            title: "Backend Infrastructure",
            items: [
              "Supabase for authentication, database, and row-level security policies",
              "Next.js App Router with server components, client components, and API routes",
              "Cookie-based authentication with SSR support",
              "PostgreSQL database with specialized workout subtypes"
            ]
          },
          {
            title: "Frontend Framework",
            items: [
              "React 19 with functional components and hooks",
              "TypeScript for type safety and enhanced developer experience",
              "shadcn/ui and Tailwind CSS for accessible, customizable components",
              "Responsive design with light/dark theme support"
            ]
          },
          {
            title: "Performance Optimizations",
            items: [
              "Dynamic imports for improved page load performance",
              "Streaming responses for AI interactions",
              "SSR for critical pages and CSR for interactive components",
              "Vercel deployment with serverless functions"
            ]
          },
          {
            title: "AI & Data Security",
            items: [
              "Anthropic Claude API integration with structured JSON outputs",
              "Custom prompting system for workout plan generation",
              "Row-level security policies ensuring user data privacy",
              "Flexible data modeling supporting various workout types"
            ]
          },
        ]
      },
      keyFeatures: [
        {
          title: "AI Coach",
          description: "Personalized training plans generated by Claude AI with intelligent workout recommendations based on user goals and fitness level"
        },
        {
          title: "Performance Analytics",
          description: "Interactive data visualizations showing workout trends, mileage tracking, and completion rate metrics"
        },
        {
          title: "Smart Calendar",
          description: "Interactive workout scheduler supporting different workout types with comprehensive tracking capabilities"
        } 
      ],
      lessonsLearned: [
        "Effective prompt engineering is crucial for creating AI systems that generate structured, actionable outputs",
        "A well-designed database schema with specialized subtypes allows flexibility while maintaining query efficiency",
        "Balancing server-side and client-side rendering based on component needs significantly improves user experience",
        "Row-level security implementation is essential for building multi-user applications with proper data isolation"
      ],
      nextProject: {
        title: "Crypto Dashboard",
        slug: "crypto-dashboard"
      }
    },
    {
      id: 2,
      title: "Crypto Dashboard",
      description:
        "A comprehensive cryptocurrency dashboard featuring real-time market data, interactive visualizations, and a robust API layer with advanced caching strategies.",
      technologies: ["React", "Next.js", "TypeScript", "Redis Caching", "Upstash", "Tailwind CSS", "Recharts", "Axios", "API Rate Limiting", "Request Tracing", "Multi-tiered caching strategy", "Coin Gecko API integration"],
      image: "/images/crypto/cryptoCompressed.png",
      slug: "crypto-dashboard",
      type: "hosted",
      year: "2025",
      role: "Full Stack Developer",
      challenge: "Building a high-performance cryptocurrency dashboard that could handle frequent API calls while providing a responsive user experience presented multiple challenges. The primary concerns were efficient data fetching, caching strategies to avoid rate limits, and creating an architecture that would scale with additional features.",
      solution: "I implemented a multi-layered API architecture with Redis-powered caching and comprehensive middleware to optimize performance. This approach focused on both developer experience and end-user satisfaction through intelligent caching, detailed request tracing, and robust error handling.",
      gallery: [
        "/images/crypto/cryptoCompressed.png",
        "/images/crypto/crypto-list.png",
        "/images/crypto/crypto-id.png",
        "/images/crypto/crypto-about.png",
      ],
      liveUrl: "https://crypto-dashboard-eta-woad.vercel.app",
      githubUrl: "https://github.com/JacksonLee45/crypto-dashboard-1",
      technicalDetails: {
        sections: [
          {
            title: "Advanced API Infrastructure",
            items: [
              "Implemented TTL-based cache invalidation with Redis",
              "Created IP-based rate limiting to prevent API abuse",
              "Built request tracing with unique IDs for debugging",
              "Set up comprehensive security headers (CSP, HSTS)"
            ]
          },
          {
            title: "Frontend Architecture",
            items: [
              "React 19 with TypeScript for type safety",
              "React Query for data fetching and state management",
              "Interactive charts powered by Recharts",
              "Responsive design optimized for all device sizes"
            ]
          },
          {
            title: "Caching Strategy",
            items: [
              "Short-lived cache (60s) for volatile data like current prices",
              "Medium-lived cache (5min) for market overviews",
              "Long-lived cache (30min) for historical data",
              "Multi-tiered caching (Redis + React Query) to minimize API calls"
            ]
          },
          {
            title: "Performance Optimizations",
            items: [
              "Server-side rendering for initial page load performance",
              "Incremental Static Regeneration for static content",
              "Optimized image loading with Next.js Image component",
              "Efficient re-renders with React optimization techniques"
            ]
          }
        ]
      },
      keyFeatures: [
        {
          title: "Real-time Market Data",
          description: "Comprehensive cryptocurrency market data with current prices, market caps, and trading volumes"
        },
        {
          title: "Interactive Visualizations",
          description: "Dynamic and responsive charts for price history, market dominance, and trading patterns"
        },
        {
          title: "Robust API Layer",
          description: "Advanced caching, rate limiting, and security features powering all data operations"
        }
      ],
      lessonsLearned: [
        "The critical importance of multi-layered caching strategies for both performance and reliability",
        "How to implement effective request tracing for debugging distributed systems",
        "Techniques for balancing fresh data requirements with API rate limits",
        "The value of structured error handling in improving developer experience"
      ],
      nextProject: {
        title: "Paragliding Weather Checker",
        slug: "paragliding-weather-checker"
      }
    },
    {
      id: 3,
      title: "Paragliding Weather Checker",
      description: "A serverless web application leveraging AWS infrastructure to deliver real-time weather data for paragliders assessing flight conditions at specific geographic coordinates.",
      technologies: ["React", "JavaScript", "AWS Lambda", "AWS API Gateway", "Tailwind CSS", "OpenWeather API", "Google Maps API"],
      image: "/images/paragliding/WeatherChecker.png",
      slug: "paragliding-weather-checker",
      type: "hosted",
      client: "Personal Project",
      year: "2024",
      role: "Full Stack Developer",
      challenge: "Designing a reliable, cost-efficient system to deliver critical weather data for paragliders without maintaining server infrastructure. The application needed to handle coordinate-based lookups while abstracting API complexity and providing intuitive visualization of weather conditions relevant to flight safety.",
      solution: "Implemented a serverless architecture using AWS Lambda and API Gateway to create a secure, scalable backend that handles authentication and external API integrations. This approach eliminated server maintenance concerns while providing millisecond response times for weather queries at virtually no cost during normal usage patterns.",
      gallery: [
        "/images/paragliding/WeatherChecker.png",
        "/images/paragliding/paragliding-form.png",
        "/images/paragliding/paragliding-data.png",
        "/images/paragliding/paragliding-wind.png",
        "/images/paragliding/paragliding-temp.png",
      ],
      liveUrl: "https://paragliding-weather-checker.vercel.app/",
      githubUrl: "https://github.com/JacksonLee45/paragliding-weather-checker",
      technicalDetails: {
        sections: [
          {
            title: "AWS Infrastructure",
            items: [
              "Configured AWS Lambda function with Node.js runtime for OpenWeather API integration",
              "Implemented API Gateway with custom domain and CORS policies",
              "Set up least-privilege IAM roles following security best practices",
              "Created CloudWatch alarms for monitoring API usage and potential cost spikes"
            ]
          },
          {
            title: "Frontend Architecture",
            items: [
              "Built with React and JavaScript for dynamic UI rendering",
              "Implemented responsive design with Tailwind CSS and Bootstrap components",
              "Optimized component structure to minimize re-renders during state updates",
              "Created custom hooks for location data management and API interactions"
            ]
          },
          {
            title: "API Integration",
            items: [
              "Designed Lambda function to proxy and transform OpenWeather API responses",
              "Implemented request validation to prevent malformed coordinate submissions",
              "Created middleware for request authentication and rate limiting",
              "Built response caching layer to reduce redundant API calls"
            ]
          },
          {
            title: "Deployment Strategy",
            items: [
              "Automated Lambda deployment with AWS SAM templates",
              "Implemented CI/CD pipeline for frontend using GitHub Actions",
              "Configured environment-specific builds for development and production",
              "Set up API Gateway staging for backend version control"
            ]
          }
        ]
      },
      keyFeatures: [
        {
          title: "Serverless Architecture",
          description: "Fully serverless design using AWS Lambda and API Gateway, enabling auto-scaling with zero infrastructure management"
        },
        {
          title: "Coordinate-Based Weather",
          description: "Precise weather lookups using geographic coordinates essential for accurate paragliding flight planning"
        },
        {
          title: "Real-Time Flight Conditions",
          description: "Integration with OpenWeather API to provide current temperature, wind speed, direction, and atmospheric conditions"
        }
      ],
      lessonsLearned: [
        "Serverless architectures significantly reduce operational complexity while providing excellent scalability for variable workloads",
        "API Gateway configuration is critical for security and can be complex to set up correctly with proper CORS and authentication",
        "Creating a separation between data fetching and UI concerns leads to more maintainable frontend code",
        "Lambda cold starts can impact user experience and should be addressed with proper warming strategies for production applications"
      ],
      nextProject: {
        title: "Emergency Room Scheduler",
        slug: "er-scheduler"
      }
    },
  ];
  
  // All projects including GitHub-only projects
  export const allProjects: Project[] = [
    ...featuredProjects,
    {
      id: 4,
      title: "EasyER: Emergency Room Scheduler",
      description: "A full-stack web application that streamlines patient management in emergency departments through automated triage and role-based interfaces for medical staff.",
      technologies: ["C#", "SQL Server", "ASP.NET Core 6.0", "Blazor WebAssembly", "Entity Framework Core", "Azure", "JWT Authentication"],
      image: "/placeholder.svg?height=600&width=800",
      slug: "er-scheduler",
      type: "hosted",
      client: "Personal Project",
      year: "2022",
      role: "Full Stack Developer",
      challenge: "The primary challenge was learning C# and developing my first full-stack application using the .NET ecosystem. Having previously worked primarily with JavaScript frameworks, this project represented a significant shift in technology stack and development paradigm. I needed to rapidly gain proficiency in C#, ASP.NET Core, Blazor WebAssembly, and Entity Framework while simultaneously designing and implementing a complex system with multiple user roles and workflows.",
      solution: "I developed EasyER, a lightweight but robust patient management system using ASP.NET Core 6.0 and Blazor WebAssembly. The application features automated patient triage based on trauma levels and wait times, real-time patient queues, and role-based interfaces for nurses, doctors, and administrators. The system follows a clean architecture with separate contexts for different domains, making it maintainable and extensible.",
      gallery: [
        "/placeholder.svg?height=600&width=800",
        "/placeholder.svg?height=600&width=800"
      ],
      githubUrl: "https://github.com/JacksonLee45/EasyER",
      technicalDetails: {
        sections: [
          {
            title: "Architecture",
            items: [
              "Modern client-server architecture with Blazor WebAssembly SPA and ASP.NET Core 6.0 backend",
              "Repository pattern to separate data access logic from controllers",
              "Entity Framework Core with code-first migrations",
              "JWT-based authentication with ASP.NET Identity",
              "Role-based authorization controlling access to features"
            ]
          },
          {
            title: "Frontend Implementation",
            items: [
              "Responsive UI built with Blazor WebAssembly and Bootstrap",
              "Role-specific components and layouts",
              "Real-time patient queue with automatic updates",
              "Form validation with data annotations",
              "Custom authentication state provider"
            ]
          },
          {
            title: "Backend Implementation",
            items: [
              "RESTful API endpoints for CRUD operations",
              "Custom middleware for exception handling and logging",
              "Dependency injection for loosely coupled components",
              "Unit tests with NUnit and Moq",
              "Azure Web App deployment with CI/CD pipeline"
            ]
          },
          {
            title: "Database Design",
            items: [
              "Code-first migrations with Entity Framework Core to evolve the database schema",
              "SQL Server with separate contexts for patients, doctors, and nurses",
              "Entity relationships modeling hospital workflows",
              "Optimized queries for high-traffic operations",
              "Data seeding for development and testing"
            ]
          }
        ]
      },
      keyFeatures: [
        {
          title: "Automated Patient Triage",
          description: "Algorithmic prioritization of patients based on trauma level and wait time, ensuring the most urgent cases are treated first"
        },
        {
          title: "Role-Based Access Control",
          description: "Tailored interfaces for nurses (patient intake), doctors (treatment), and administrators (system management)"
        },
        {
          title: "Real-Time Patient Queue",
          description: "Dynamic display of patients sorted by urgency with color-coded indicators for quick visual assessment"
        },
        {
          title: "Doctor-Patient Assignment",
          description: "Tracking system for doctor-patient relationships, balancing workloads and ensuring accountability"
        }
      ],
      lessonsLearned: [
        "Blazor WebAssembly provides a compelling alternative to JavaScript frameworks for .NET developers, enabling code sharing between client and server",
        "Entity Framework Core's migrations are powerful but require careful planning to avoid performance issues in production",
        "Role-based authorization is most effective when designed around specific user workflows rather than abstract permissions",
        "Repository pattern significantly improves testability but introduces overhead that should be justified by project complexity"
      ],
      nextProject: {
        title: "Portfolio Website",
        slug: "portfolio"
      }
    },
    {
      id: 5,
      title: "Portfolio Website",
      description: "A modern, responsive portfolio website built with Next.js, TypeScript, and Tailwind CSS designed to showcase my professional experience, projects, and outside interests in a clean, accessible interface.",
      technologies: ["Next.js", "TypeScript", "Tailwind CSS", "shadcn/ui", "Vercel", "Responsive Design"],
      image: "/images/portfolio/portfolio-home.png",
      slug: "portfolio",
      type: "hosted",
      client: "Personal Project",
      year: "2025",
      role: "Full Stack Developer",
      challenge: "Creating a portfolio that effectively communicates both technical skills and personality is challenging. The site needed to be performant, accessible, and visually appealing while showcasing projects with appropriate technical depth. Additionally, I wanted to implement a component system that would enable easy maintenance and future enhancements without sacrificing design quality.",
      solution: "I built a modern, responsive portfolio using Next.js App Router and TypeScript, prioritizing both aesthetics and technical excellence. By leveraging shadcn/ui component library with Tailwind CSS, I implemented a clean design system with light/dark mode support. The site features detailed project pages with comprehensive information about technical implementations, responsive layouts for all device sizes, and optimized performance metrics.",
      gallery: [
        "/images/portfolio/portfolio-home.png"
      ],
      githubUrl: "https://github.com/JacksonLee45/jackson-lee",
      technicalDetails: {
        sections: [
          {
            title: "Frontend Architecture",
            items: [
              "Next.js App Router architecture with optimized routing and page transitions",
              "TypeScript implementation for type safety and improved developer experience",
              "Responsive design system using Tailwind CSS with custom utility classes",
              "Light and dark mode support with system preference detection"
            ]
          },
          {
            title: "Component Library",
            items: [
              "Implemented shadcn/ui components built on Radix UI primitives",
              "Custom component creation for specialized UI elements",
              "Accessibility-focused component design with proper ARIA attributes",
              "Reusable layout components for consistent page structure"
            ]
          },
          {
            title: "Performance Optimizations",
            items: [
              "Image optimization with Next.js Image component",
              "Static site rendering with pre-built HTML pages",
              "Route-based code splitting with Next.js App Router",
              "Optimized font loading with next/font integration"
            ]
          }
        ]
      },
      keyFeatures: [
        {
          title: "Responsive Design",
          description: "Fully responsive layout that adapts seamlessly to all device sizes from mobile to desktop"
        },
        {
          title: "Project Showcase",
          description: "Detailed project pages highlighting technical implementations, challenges, and solutions"
        },
        {
          title: "Theme Support",
          description: "Light and dark mode with automatic system preference detection for optimal viewing experience"
        },
        {
          title: "Performance Focused",
          description: "Optimized for speed and accessibility with perfect Lighthouse scores across all metrics"
        }
      ],
      lessonsLearned: [
        "Designing with a component-first approach significantly improves consistency and development speed",
        "Tailwind CSS utility classes enable rapid UI development without sacrificing design quality",
        "Next.js App Router provides excellent developer experience and performance benefits",
        "Careful planning of content structure is essential for creating a maintainable portfolio site"
      ],
    },
  ];
  
  // Helper function to get a project by slug
  export function getProjectBySlug(slug: string): Project | undefined {
    return allProjects.find(project => project.slug === slug);
  }